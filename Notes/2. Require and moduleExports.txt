* Global Object:
    In js We have window as Global object which is also accesses using this both are provided by browsers.
    In node node.js we have global as global object which provides functions like setTimeout, setInterval etc.
    We also have globalThis which is available for all browsers and node also have same object.
    i.e window === this === global === globalThis

* In Node.js, **`require`** and **`module.exports`** are part of its **module system**, which allows developers 
    to organize code into reusable, separate files or packages.

---

### 1. **`require`**

The `require` function is used to import modules, libraries, or specific code from other files into the current file. 
    It allows you to access the functionality or data exported by another file.

#### Syntax:
```javascript
const moduleName = require('./path/to/module');
```
### 2. **`module.exports`**

The `module.exports` object is used to **export data, functions, or objects** from a module so that other files can access 
    them using `require`.

#### How it Works:
- By default, every file in Node.js is treated as a module.
- Node.js wraps the code of each module in a function, and an empty `module.exports` object is available to add exports.
- You populate `module.exports` with whatever you want to expose.

#### Syntax:
```javascript
module.exports = <value>;
```
   module.exports = { add, subtract }; // Export multiple items
   ```

*** The require function basically take the files and executes it like a IIFE
     here is a catch if its executed immediately the why we need to export the variables.
     this is bcoz variable in a file in node are private and as they are imported as a IIFE
     so the variables are basically inside a function and as we know variables inside a function 
     are not accessible due to lexical scoping.


* When you call `require(fileName)` in Node.js **without assigning it to a variable**, the module is still loaded and executed, 
    but its exports are not stored or used in the current file. This approach is typically used when you want to **execute the module 
    for its side effects** rather than using its exports.

---

### What Happens When You Call `require(fileName)` Without a Variable:
1. **The module is still loaded and executed:**
   - Node.js reads and runs the code in the module.
   - If the module performs operations (e.g., logging, setting up a server, etc.), those actions will occur.

2. **The module's exports are ignored:**
   - Since you don’t store the result of `require`, you won’t have access to the module's exported values or functions.

---

### Example:

#### File: `logger.js`
```javascript
console.log("Logger module loaded!");

module.exports = {
  log: (message) => console.log(message),
};
```

#### File: `app.js`
```javascript
require('./logger'); // Only executes the file. Exports are ignored.
```

**Output:**
```
Logger module loaded!
```

- The code in `logger.js` runs, but you cannot use `logger.log` because you didn’t assign the result of `require('./logger')` to a variable.

---

### Use Cases for Using `require` Without Assigning:
1. **Run Code for Side Effects:**
   - You might load a module just to execute its initialization logic or set up some global functionality.
   - Example:
     ```javascript
     require('./setupGlobals'); // Sets up global variables or config
     ```

2. **Run Polyfills:**
   - Some modules modify the global environment, so you don’t need to store their exports.
   - Example:
     ```javascript
     require('dotenv').config(); // Loads environment variables
     ```

3. **Execute Middleware or Framework Hooks:**
   - Example:
     ```javascript
     require('./databaseConnection'); // Automatically connects to the database
     ```

---

### What Happens If the Module is Required Multiple Times?
- Node.js caches the result of the first `require` for each module.
- If you require the same module again (with or without assigning it), Node.js will **reuse the cached version** 
    and won’t re-execute the module code unless the cache is cleared.
---

### When Should You Avoid Doing This?
- If you need to use the module's exports, **you must assign it to a variable**.
- Example:
   ```javascript
   const logger = require('./logger');
   logger.log('This works!'); // Correct usage
   ```